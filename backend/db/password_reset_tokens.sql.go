// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: password_reset_tokens.sql

package db

import (
	"context"
)

const existsPasswordResetTokenByUserID = `-- name: ExistsPasswordResetTokenByUserID :one
SELECT EXISTS(SELECT 1 FROM password_reset_tokens WHERE user_id = $1)
`

func (q *Queries) ExistsPasswordResetTokenByUserID(ctx context.Context, userID string) (bool, error) {
	row := q.db.QueryRow(ctx, existsPasswordResetTokenByUserID, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getPasswordResetTokenByID = `-- name: GetPasswordResetTokenByID :one
SELECT id, user_id, created_at, expires_at
FROM password_reset_tokens
WHERE id = $1
`

func (q *Queries) GetPasswordResetTokenByID(ctx context.Context, id string) (PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, getPasswordResetTokenByID, id)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const newPasswordResetToken = `-- name: NewPasswordResetToken :one
INSERT INTO password_reset_tokens (user_id, expires_at)
VALUES ($1, $2) RETURNING id
`

type NewPasswordResetTokenParams struct {
	UserID    string `json:"user_id"`
	ExpiresAt int64  `json:"expires_at"`
}

func (q *Queries) NewPasswordResetToken(ctx context.Context, arg NewPasswordResetTokenParams) (string, error) {
	row := q.db.QueryRow(ctx, newPasswordResetToken, arg.UserID, arg.ExpiresAt)
	var id string
	err := row.Scan(&id)
	return id, err
}

const removePasswordResetTokenByID = `-- name: RemovePasswordResetTokenByID :exec
DELETE FROM password_reset_tokens WHERE id = $1
`

func (q *Queries) RemovePasswordResetTokenByID(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, removePasswordResetTokenByID, id)
	return err
}

const removePasswordResetTokenByUserID = `-- name: RemovePasswordResetTokenByUserID :exec
DELETE FROM password_reset_tokens WHERE user_id = $1
`

func (q *Queries) RemovePasswordResetTokenByUserID(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, removePasswordResetTokenByUserID, userID)
	return err
}
