// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkProfileComplete = `-- name: CheckProfileComplete :one
SELECT is_profile_complete, role
FROM user_profiles
WHERE user_id = $1
`

type CheckProfileCompleteRow struct {
	IsProfileComplete bool
	Role              UserRole
}

func (q *Queries) CheckProfileComplete(ctx context.Context, userID string) (CheckProfileCompleteRow, error) {
	row := q.db.QueryRow(ctx, checkProfileComplete, userID)
	var i CheckProfileCompleteRow
	err := row.Scan(&i.IsProfileComplete, &i.Role)
	return i, err
}

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profiles (
    user_id,
    first_name,
    last_name,
    position,
    role,
    bio,
    expertise,
    is_profile_complete
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, user_id, first_name, last_name, position, role, bio, expertise, is_profile_complete, created_at, updated_at
`

type CreateUserProfileParams struct {
	UserID            string
	FirstName         string
	LastName          string
	Position          string
	Role              UserRole
	Bio               string
	Expertise         []string
	IsProfileComplete bool
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, createUserProfile,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Position,
		arg.Role,
		arg.Bio,
		arg.Expertise,
		arg.IsProfileComplete,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Position,
		&i.Role,
		&i.Bio,
		&i.Expertise,
		&i.IsProfileComplete,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM user_profiles
WHERE user_id = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteUserProfile, userID)
	return err
}

const getUserProfileByUserID = `-- name: GetUserProfileByUserID :one
SELECT id, user_id, first_name, last_name, position, role, bio, expertise, is_profile_complete, created_at, updated_at FROM user_profiles
WHERE user_id = $1
`

func (q *Queries) GetUserProfileByUserID(ctx context.Context, userID string) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfileByUserID, userID)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Position,
		&i.Role,
		&i.Bio,
		&i.Expertise,
		&i.IsProfileComplete,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllCompleteProfiles = `-- name: ListAllCompleteProfiles :many
SELECT p.id, p.user_id, p.first_name, p.last_name, p.position, p.role, p.bio, p.expertise, p.is_profile_complete, p.created_at, p.updated_at, u.email
FROM user_profiles p
JOIN users u ON p.user_id = u.id
WHERE p.is_profile_complete = true
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type ListAllCompleteProfilesParams struct {
	Limit  int32
	Offset int32
}

type ListAllCompleteProfilesRow struct {
	ID                string
	UserID            string
	FirstName         string
	LastName          string
	Position          string
	Role              UserRole
	Bio               string
	Expertise         []string
	IsProfileComplete bool
	CreatedAt         pgtype.Timestamptz
	UpdatedAt         pgtype.Timestamptz
	Email             string
}

func (q *Queries) ListAllCompleteProfiles(ctx context.Context, arg ListAllCompleteProfilesParams) ([]ListAllCompleteProfilesRow, error) {
	rows, err := q.db.Query(ctx, listAllCompleteProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllCompleteProfilesRow
	for rows.Next() {
		var i ListAllCompleteProfilesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Position,
			&i.Role,
			&i.Bio,
			&i.Expertise,
			&i.IsProfileComplete,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserProfilesByRole = `-- name: ListUserProfilesByRole :many
SELECT p.id, p.user_id, p.first_name, p.last_name, p.position, p.role, p.bio, p.expertise, p.is_profile_complete, p.created_at, p.updated_at, u.email
FROM user_profiles p
JOIN users u ON p.user_id = u.id
WHERE p.role = $1 AND p.is_profile_complete = true
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type ListUserProfilesByRoleParams struct {
	Role   UserRole
	Limit  int32
	Offset int32
}

type ListUserProfilesByRoleRow struct {
	ID                string
	UserID            string
	FirstName         string
	LastName          string
	Position          string
	Role              UserRole
	Bio               string
	Expertise         []string
	IsProfileComplete bool
	CreatedAt         pgtype.Timestamptz
	UpdatedAt         pgtype.Timestamptz
	Email             string
}

func (q *Queries) ListUserProfilesByRole(ctx context.Context, arg ListUserProfilesByRoleParams) ([]ListUserProfilesByRoleRow, error) {
	rows, err := q.db.Query(ctx, listUserProfilesByRole, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserProfilesByRoleRow
	for rows.Next() {
		var i ListUserProfilesByRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Position,
			&i.Role,
			&i.Bio,
			&i.Expertise,
			&i.IsProfileComplete,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE user_profiles
SET
    first_name = $2,
    last_name = $3,
    position = $4,
    role = $5,
    bio = $6,
    expertise = $7,
    is_profile_complete = $8
WHERE user_id = $1
RETURNING id, user_id, first_name, last_name, position, role, bio, expertise, is_profile_complete, created_at, updated_at
`

type UpdateUserProfileParams struct {
	UserID            string
	FirstName         string
	LastName          string
	Position          string
	Role              UserRole
	Bio               string
	Expertise         []string
	IsProfileComplete bool
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Position,
		arg.Role,
		arg.Bio,
		arg.Expertise,
		arg.IsProfileComplete,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Position,
		&i.Role,
		&i.Bio,
		&i.Expertise,
		&i.IsProfileComplete,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
