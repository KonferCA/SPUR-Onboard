// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, role, email_verified, created_at, updated_at, token_salt FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TokenSalt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, role, email_verified, token_salt
FROM users 
WHERE id = $1
`

type GetUserByIDRow struct {
	ID            string   `json:"id"`
	Email         string   `json:"email"`
	Role          UserRole `json:"role"`
	EmailVerified bool     `json:"email_verified"`
	TokenSalt     []byte   `json:"token_salt"`
}

func (q *Queries) GetUserByID(ctx context.Context, id string) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.EmailVerified,
		&i.TokenSalt,
	)
	return i, err
}

const getUserEmailVerifiedStatusByEmail = `-- name: GetUserEmailVerifiedStatusByEmail :one
SELECT email_verified FROM users WHERE email = $1
`

func (q *Queries) GetUserEmailVerifiedStatusByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, getUserEmailVerifiedStatusByEmail, email)
	var email_verified bool
	err := row.Scan(&email_verified)
	return email_verified, err
}

const newUser = `-- name: NewUser :one
INSERT INTO users
(email, password, role)
VALUES
($1, $2, $3) RETURNING id, email, email_verified, role, token_salt
`

type NewUserParams struct {
	Email    string   `json:"email"`
	Password string   `json:"password"`
	Role     UserRole `json:"role"`
}

type NewUserRow struct {
	ID            string   `json:"id"`
	Email         string   `json:"email"`
	EmailVerified bool     `json:"email_verified"`
	Role          UserRole `json:"role"`
	TokenSalt     []byte   `json:"token_salt"`
}

func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) (NewUserRow, error) {
	row := q.db.QueryRow(ctx, newUser, arg.Email, arg.Password, arg.Role)
	var i NewUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.Role,
		&i.TokenSalt,
	)
	return i, err
}

const updateUserEmailVerifiedStatus = `-- name: UpdateUserEmailVerifiedStatus :exec
UPDATE users SET email_verified = $1 WHERE id = $2
`

type UpdateUserEmailVerifiedStatusParams struct {
	EmailVerified bool   `json:"email_verified"`
	ID            string `json:"id"`
}

func (q *Queries) UpdateUserEmailVerifiedStatus(ctx context.Context, arg UpdateUserEmailVerifiedStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserEmailVerifiedStatus, arg.EmailVerified, arg.ID)
	return err
}

const userExistsByEmail = `-- name: UserExistsByEmail :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) UserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, userExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
