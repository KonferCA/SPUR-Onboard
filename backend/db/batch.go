// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const updateProjectDraft = `-- name: UpdateProjectDraft :batchexec
INSERT INTO project_answers (project_id, question_id, answer, updated_at)
    VALUES ($1, $2, $3, extract(epoch from now()))
    ON CONFLICT (project_id, question_id)
    DO UPDATE
    SET answer = EXCLUDED.answer,
    updated_at = EXCLUDED.updated_at
`

type UpdateProjectDraftBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateProjectDraftParams struct {
	ProjectID  string `json:"project_id"`
	QuestionID string `json:"question_id"`
	Answer     string `json:"answer"`
}

func (q *Queries) UpdateProjectDraft(ctx context.Context, arg []UpdateProjectDraftParams) *UpdateProjectDraftBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ProjectID,
			a.QuestionID,
			a.Answer,
		}
		batch.Queue(updateProjectDraft, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdateProjectDraftBatchResults{br, len(arg), false}
}

func (b *UpdateProjectDraftBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateProjectDraftBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
