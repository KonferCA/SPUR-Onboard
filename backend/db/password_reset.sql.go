// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: password_reset.sql

package db

import (
	"context"
)

const existsResetPasswordTokenByUserID = `-- name: ExistsResetPasswordTokenByUserID :one
SELECT EXISTS(SELECT 1 FROM password_reset_tokens WHERE user_id = $1)
`

func (q *Queries) ExistsResetPasswordTokenByUserID(ctx context.Context, userID string) (bool, error) {
	row := q.db.QueryRow(ctx, existsResetPasswordTokenByUserID, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getResetPasswordTokenByID = `-- name: GetResetPasswordTokenByID :one
SELECT id, user_id, created_at, expires_at
FROM password_reset_tokens
WHERE id = $1
`

type GetResetPasswordTokenByIDRow struct {
	ID        string `json:"id"`
	UserID    string `json:"user_id"`
	CreatedAt int64  `json:"created_at"`
	ExpiresAt int64  `json:"expires_at"`
}

func (q *Queries) GetResetPasswordTokenByID(ctx context.Context, id string) (GetResetPasswordTokenByIDRow, error) {
	row := q.db.QueryRow(ctx, getResetPasswordTokenByID, id)
	var i GetResetPasswordTokenByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const newResetPasswordToken = `-- name: NewResetPasswordToken :one
INSERT INTO password_reset_tokens (user_id, expires_at)
VALUES ($1, $2) RETURNING id
`

type NewResetPasswordTokenParams struct {
	UserID    string `json:"user_id"`
	ExpiresAt int64  `json:"expires_at"`
}

func (q *Queries) NewResetPasswordToken(ctx context.Context, arg NewResetPasswordTokenParams) (string, error) {
	row := q.db.QueryRow(ctx, newResetPasswordToken, arg.UserID, arg.ExpiresAt)
	var id string
	err := row.Scan(&id)
	return id, err
}

const removeResetPasswordTokenByID = `-- name: RemoveResetPasswordTokenByID :exec
DELETE FROM password_reset_tokens WHERE id = $1
`

func (q *Queries) RemoveResetPasswordTokenByID(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, removeResetPasswordTokenByID, id)
	return err
}

const removeResetPasswordTokenByUserID = `-- name: RemoveResetPasswordTokenByUserID :exec
DELETE FROM password_reset_tokens WHERE user_id = $1
`

func (q *Queries) RemoveResetPasswordTokenByUserID(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, removeResetPasswordTokenByUserID, userID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = $1, updated_at = extract(epoch from now())
WHERE id = $2
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}
