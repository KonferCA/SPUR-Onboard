// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: meetings.sql

package db

import (
	"context"
	"time"
)

const createMeeting = `-- name: CreateMeeting :one
INSERT INTO meetings (
    project_id,
    scheduled_by_user_id,
    start_time,
    end_time,
    meeting_url,
    location,
    notes
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, project_id, scheduled_by_user_id, start_time, end_time, meeting_url, location, notes, created_at, updated_at
`

type CreateMeetingParams struct {
	ProjectID         string
	ScheduledByUserID string
	StartTime         time.Time
	EndTime           time.Time
	MeetingUrl        *string
	Location          *string
	Notes             *string
}

func (q *Queries) CreateMeeting(ctx context.Context, arg CreateMeetingParams) (Meeting, error) {
	row := q.db.QueryRow(ctx, createMeeting,
		arg.ProjectID,
		arg.ScheduledByUserID,
		arg.StartTime,
		arg.EndTime,
		arg.MeetingUrl,
		arg.Location,
		arg.Notes,
	)
	var i Meeting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ScheduledByUserID,
		&i.StartTime,
		&i.EndTime,
		&i.MeetingUrl,
		&i.Location,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMeeting = `-- name: DeleteMeeting :exec
DELETE FROM meetings 
WHERE id = $1
`

func (q *Queries) DeleteMeeting(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteMeeting, id)
	return err
}

const getMeeting = `-- name: GetMeeting :one
SELECT id, project_id, scheduled_by_user_id, start_time, end_time, meeting_url, location, notes, created_at, updated_at FROM meetings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMeeting(ctx context.Context, id string) (Meeting, error) {
	row := q.db.QueryRow(ctx, getMeeting, id)
	var i Meeting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ScheduledByUserID,
		&i.StartTime,
		&i.EndTime,
		&i.MeetingUrl,
		&i.Location,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMeetings = `-- name: ListMeetings :many
SELECT id, project_id, scheduled_by_user_id, start_time, end_time, meeting_url, location, notes, created_at, updated_at FROM meetings
ORDER BY start_time DESC
`

func (q *Queries) ListMeetings(ctx context.Context) ([]Meeting, error) {
	rows, err := q.db.Query(ctx, listMeetings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meeting
	for rows.Next() {
		var i Meeting
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.ScheduledByUserID,
			&i.StartTime,
			&i.EndTime,
			&i.MeetingUrl,
			&i.Location,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectMeetings = `-- name: ListProjectMeetings :many
SELECT id, project_id, scheduled_by_user_id, start_time, end_time, meeting_url, location, notes, created_at, updated_at FROM meetings
WHERE project_id = $1
ORDER BY start_time DESC
`

func (q *Queries) ListProjectMeetings(ctx context.Context, projectID string) ([]Meeting, error) {
	rows, err := q.db.Query(ctx, listProjectMeetings, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meeting
	for rows.Next() {
		var i Meeting
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.ScheduledByUserID,
			&i.StartTime,
			&i.EndTime,
			&i.MeetingUrl,
			&i.Location,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeeting = `-- name: UpdateMeeting :one
UPDATE meetings 
SET 
    start_time = $2,
    end_time = $3,
    meeting_url = $4,
    location = $5,
    notes = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, project_id, scheduled_by_user_id, start_time, end_time, meeting_url, location, notes, created_at, updated_at
`

type UpdateMeetingParams struct {
	ID         string
	StartTime  time.Time
	EndTime    time.Time
	MeetingUrl *string
	Location   *string
	Notes      *string
}

func (q *Queries) UpdateMeeting(ctx context.Context, arg UpdateMeetingParams) (Meeting, error) {
	row := q.db.QueryRow(ctx, updateMeeting,
		arg.ID,
		arg.StartTime,
		arg.EndTime,
		arg.MeetingUrl,
		arg.Location,
		arg.Notes,
	)
	var i Meeting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ScheduledByUserID,
		&i.StartTime,
		&i.EndTime,
		&i.MeetingUrl,
		&i.Location,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
