// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: funding_transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFundingTransaction = `-- name: CreateFundingTransaction :one
INSERT INTO funding_transactions (
    project_id,
    amount,
    currency,
    transaction_hash,
    from_wallet_address,
    to_wallet_address,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, project_id, amount, currency, transaction_hash, from_wallet_address, to_wallet_address, status, created_at, updated_at
`

type CreateFundingTransactionParams struct {
	ProjectID         string
	Amount            pgtype.Numeric
	Currency          string
	TransactionHash   string
	FromWalletAddress string
	ToWalletAddress   string
	Status            string
}

func (q *Queries) CreateFundingTransaction(ctx context.Context, arg CreateFundingTransactionParams) (FundingTransaction, error) {
	row := q.db.QueryRow(ctx, createFundingTransaction,
		arg.ProjectID,
		arg.Amount,
		arg.Currency,
		arg.TransactionHash,
		arg.FromWalletAddress,
		arg.ToWalletAddress,
		arg.Status,
	)
	var i FundingTransaction
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Amount,
		&i.Currency,
		&i.TransactionHash,
		&i.FromWalletAddress,
		&i.ToWalletAddress,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFundingTransaction = `-- name: DeleteFundingTransaction :exec
DELETE FROM funding_transactions
WHERE id = $1
`

func (q *Queries) DeleteFundingTransaction(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteFundingTransaction, id)
	return err
}

const getFundingTransaction = `-- name: GetFundingTransaction :one
SELECT id, project_id, amount, currency, transaction_hash, from_wallet_address, to_wallet_address, status, created_at, updated_at FROM funding_transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFundingTransaction(ctx context.Context, id string) (FundingTransaction, error) {
	row := q.db.QueryRow(ctx, getFundingTransaction, id)
	var i FundingTransaction
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Amount,
		&i.Currency,
		&i.TransactionHash,
		&i.FromWalletAddress,
		&i.ToWalletAddress,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFundingTransactions = `-- name: ListFundingTransactions :many
SELECT id, project_id, amount, currency, transaction_hash, from_wallet_address, to_wallet_address, status, created_at, updated_at FROM funding_transactions
ORDER BY created_at DESC
`

func (q *Queries) ListFundingTransactions(ctx context.Context) ([]FundingTransaction, error) {
	rows, err := q.db.Query(ctx, listFundingTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FundingTransaction
	for rows.Next() {
		var i FundingTransaction
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Amount,
			&i.Currency,
			&i.TransactionHash,
			&i.FromWalletAddress,
			&i.ToWalletAddress,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectFundingTransactions = `-- name: ListProjectFundingTransactions :many
SELECT id, project_id, amount, currency, transaction_hash, from_wallet_address, to_wallet_address, status, created_at, updated_at FROM funding_transactions
WHERE project_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProjectFundingTransactions(ctx context.Context, projectID string) ([]FundingTransaction, error) {
	rows, err := q.db.Query(ctx, listProjectFundingTransactions, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FundingTransaction
	for rows.Next() {
		var i FundingTransaction
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Amount,
			&i.Currency,
			&i.TransactionHash,
			&i.FromWalletAddress,
			&i.ToWalletAddress,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFundingTransactionStatus = `-- name: UpdateFundingTransactionStatus :one
UPDATE funding_transactions
SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, project_id, amount, currency, transaction_hash, from_wallet_address, to_wallet_address, status, created_at, updated_at
`

type UpdateFundingTransactionStatusParams struct {
	ID     string
	Status string
}

func (q *Queries) UpdateFundingTransactionStatus(ctx context.Context, arg UpdateFundingTransactionStatusParams) (FundingTransaction, error) {
	row := q.db.QueryRow(ctx, updateFundingTransactionStatus, arg.ID, arg.Status)
	var i FundingTransaction
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Amount,
		&i.Currency,
		&i.TransactionHash,
		&i.FromWalletAddress,
		&i.ToWalletAddress,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
