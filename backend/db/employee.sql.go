// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: employee.sql

package db

import (
	"context"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (
    company_id,
    name,
    email,
    role,
    bio
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, company_id, name, email, role, bio, created_at, updated_at
`

type CreateEmployeeParams struct {
	CompanyID string
	Name      string
	Email     string
	Role      string
	Bio       *string
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.CompanyID,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.Bio,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployeeByEmail = `-- name: GetEmployeeByEmail :one
SELECT id, company_id, name, email, role, bio, created_at, updated_at FROM employees
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetEmployeeByEmail(ctx context.Context, email string) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByEmail, email)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT id, company_id, name, email, role, bio, created_at, updated_at FROM employees
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployeeByID(ctx context.Context, id string) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByID, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, company_id, name, email, role, bio, created_at, updated_at FROM employees
ORDER BY created_at DESC
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesByCompany = `-- name: ListEmployeesByCompany :many
SELECT id, company_id, name, email, role, bio, created_at, updated_at FROM employees
WHERE company_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListEmployeesByCompany(ctx context.Context, companyID string) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listEmployeesByCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employees
SET 
    name = $2,
    role = $3,
    bio = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, company_id, name, email, role, bio, created_at, updated_at
`

type UpdateEmployeeParams struct {
	ID   string
	Name string
	Role string
	Bio  *string
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployee,
		arg.ID,
		arg.Name,
		arg.Role,
		arg.Bio,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
